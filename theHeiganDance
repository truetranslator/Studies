package multidimentionalArraysPractice;

import java.util.Scanner;

public class theHeiganDance {
    public static void main(String[] args){
        Scanner scanner=new Scanner(System.in);
        int playerHealth=18500;
        double bossHealth=3000000;
        double playerDamage=Double.parseDouble(scanner.nextLine());
        int[] playerPos=new int[2];
        playerPos[0]=7;
        playerPos[1]=7;
        boolean isInCloud=false;
        while (playerHealth>0 ){
            bossHealth-=playerDamage;
            if (isInCloud){
                playerHealth-=3500;
                isInCloud=false;
            }
            if (bossHealth>0) {
                int damageDone=0;
                String[] tokens = scanner.nextLine().split(" ");
                String spell = tokens[0];
                int targetRow = Integer.parseInt(tokens[1]);
                int targetCol = Integer.parseInt(tokens[2]);
                boolean isPlayerDamaged=isPlaerHit(playerPos[0], playerPos[1], targetRow, targetCol);
                if (isPlayerDamaged){
                if (spell.equals("Cloud")){
                   damageDone=3500;
                }else{ damageDone=6000;   }
                boolean canMove=playerCanMoveAndMovePlayer(playerPos, targetCol, targetCol);


                if (!canMove) {
                    playerHealth -= damageDone;
                    if (spell.equals("Cloud")){
                        isInCloud=true;
                    }
                }
            }}

        }
        System.out.println(String.format("Final position: %d, %d", playerPos[0], playerPos[1]));
}

    private static boolean playerCanMoveAndMovePlayer(int[] position, int row, int col) {
        boolean canMove=false;
        int r=position[0];
        int c=position[1];
        if (r==row && c==col){
            canMove=false;
        }else if (isInBounds(r-1,c) && !isPlaerHit(r-1,c, row, col)){
            r--;
        }else if (isInBounds(r, c+1) && !isPlaerHit(r, c+1, row, col)){
            c++;
        }else if (isInBounds(r+1, c)&& !isPlaerHit(r+1, c, row, col)){
            r++;
        }else if (isInBounds(r, c-1)&& !isPlaerHit(r, c-1,row, col)){
            c--;
        }else {
            canMove=false;
        }
        position[0]=r;
        position[1]=c;
        return canMove;
    }

    private static boolean isInBounds(int r, int c) {
        return r>=0 && r<=15 && c>=0 && c<=15;
    }

    private static boolean isPlaerHit(int r, int c, int targetRow, int targetCol) {
        return r>=targetRow-1 && r<=targetRow+1 && c>=targetCol-1 && c<=targetCol+1;
    }


}
