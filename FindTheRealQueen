package com.company;

import java.util.Scanner;

public class FindTheRealQueen {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int size = 8;
        char[][] board = new char[size][size];
        for (int i = 0; i < size; i++) {
            String[] line = scanner.nextLine().split(" ");
            for (int j = 0; j < line.length; j++) {
                board[i][j] = line[j].charAt(0);
            }
        }
        for (int r = 0; r < size; r++) {
            for (int c = 0; c < size; c++) {
                if (board[r][c] == 'q') {
                    boolean isColValid = chekQueenCol(board, c);
                    boolean isRowValid = chekQueenRow(board, r);
                    boolean isMainDiagonalUpAndLeftValid = chekMainDiagonalUpLeft(board, r, c);
                    boolean isMainDiagonalDownAndRight = checkMainDiagonalDownRight(board, r, c);
                    boolean isSecondaryDiagonalDownAndLeftValid = chekSecondaryDiagonalDownLeft(board, r, c);
                    boolean isSecondaryDiagonalUpAndRight = checkSecondaryDiagonalUpRight(board, r, c);
                    if (isColValid && isRowValid && isMainDiagonalDownAndRight && isMainDiagonalUpAndLeftValid
                    && isSecondaryDiagonalDownAndLeftValid && isSecondaryDiagonalUpAndRight){
                        System.out.println(r + " "+c);
                        return;
                    }
                }
            }
        }
    }

    private static boolean checkSecondaryDiagonalUpRight(char[][] board, int row, int col) {
        row--;
        col++;
        while (row>=0 && col<8){
            if (board[row--][col++]=='q'){
                return false;
            }
        }return true;
    }

    private static boolean chekSecondaryDiagonalDownLeft(char[][] board, int row, int col) {
        row++;
        col--;
        while (row<8 && col>=0){
            if (board[row++][col--]=='q'){
                return false;
            }
        }return true;
    }

    private static boolean checkMainDiagonalDownRight(char[][] board, int row, int col) {
        row++;
        col++;
        while (row<8 && col<8){
            if (board[row++][col++]=='q'){
                return false;
            }
        }return true;

    }

    private static boolean chekMainDiagonalUpLeft(char[][] board, int col, int row){
        row--;
        col--;
        while (row>=0 && col>=0){
            if (board[row--][col--]=='q'){
                 return false;
            }
        }return true;
    }
    private static boolean chekQueenCol(char[][] board, int col) {
        int queen = 0;
        for (int i = 0; i < board.length; i++) {
            char symbol = board[i][col];
            if (symbol == 'q') {
                queen++;
                }
   }
            return queen==1;

    }
    private static boolean chekQueenRow(char[][] board, int row){
        int queen = 0;
        for (int i = 0; i < board.length; i++) {
            char symbol = board[row][i];
            if (symbol == 'q') {
                queen++;
            }
        }
        return queen==1;
    }
}
